"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const ValueBuilderModal = ({ valueBuilderModal, currentBuilder, jsonKeys, jsonData, addBuilderPart, updateBuilderPart, removeBuilderPart, moveBuilderPart, evaluateValueBuilder, closeValueBuilder, saveValueBuilder }) => {
    if (!valueBuilderModal.isOpen)
        return null;
    return ((0, jsx_runtime_1.jsx)("div", { className: "modal-overlay", children: (0, jsx_runtime_1.jsxs)("div", { className: "modal", children: [(0, jsx_runtime_1.jsxs)("div", { className: "modal-header", children: [(0, jsx_runtime_1.jsxs)("h3", { className: "modal-title", children: ["Value Builder: ", valueBuilderModal.mappingKey] }), (0, jsx_runtime_1.jsx)("button", { className: "modal-close", onClick: closeValueBuilder, children: "\u00D7" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "add-part-buttons", children: [(0, jsx_runtime_1.jsx)("button", { className: "add-part-btn", onClick: () => addBuilderPart('key'), children: "Add Key" }), (0, jsx_runtime_1.jsx)("button", { className: "add-part-btn", onClick: () => addBuilderPart('text'), children: "Add Text" }), (0, jsx_runtime_1.jsx)("button", { className: "add-part-btn", onClick: () => addBuilderPart('separator'), children: "Add Separator" })] }), currentBuilder.parts.map((part, index) => ((0, jsx_runtime_1.jsxs)("div", { className: "builder-part", children: [(0, jsx_runtime_1.jsxs)("div", { className: "reorder-controls", children: [(0, jsx_runtime_1.jsx)("button", { className: "reorder-btn", onClick: () => moveBuilderPart(index, Math.max(0, index - 1)), disabled: index === 0, children: "\u2191" }), (0, jsx_runtime_1.jsx)("button", { className: "reorder-btn", onClick: () => moveBuilderPart(index, Math.min(currentBuilder.parts.length - 1, index + 1)), disabled: index === currentBuilder.parts.length - 1, children: "\u2193" })] }), (0, jsx_runtime_1.jsxs)("select", { value: part.type, onChange: (e) => updateBuilderPart(index, 'type', e.target.value), children: [(0, jsx_runtime_1.jsx)("option", { value: "key", children: "JSON Key" }), (0, jsx_runtime_1.jsx)("option", { value: "text", children: "Static Text" }), (0, jsx_runtime_1.jsx)("option", { value: "separator", children: "Separator" })] }), part.type === 'key' ? ((0, jsx_runtime_1.jsxs)("select", { value: part.value, onChange: (e) => updateBuilderPart(index, 'value', e.target.value), children: [(0, jsx_runtime_1.jsx)("option", { value: "", children: "Select key..." }), jsonKeys.map(key => ((0, jsx_runtime_1.jsx)("option", { value: key, children: key }, key)))] })) : ((0, jsx_runtime_1.jsx)("input", { type: "text", value: part.value, onChange: (e) => updateBuilderPart(index, 'value', e.target.value), placeholder: part.type === 'text' ? 'Enter text' : 'e.g., " - "' })), (0, jsx_runtime_1.jsx)("button", { className: "remove-part-btn", onClick: () => removeBuilderPart(index), children: "\u00D7" })] }, index))), jsonData && jsonData.length > 0 && ((0, jsx_runtime_1.jsxs)("div", { className: "preview-section", children: [(0, jsx_runtime_1.jsx)("div", { className: "preview-label", children: "Preview:" }), (0, jsx_runtime_1.jsx)("div", { className: "preview-value", children: evaluateValueBuilder(currentBuilder, jsonData[0]) })] })), (0, jsx_runtime_1.jsxs)("div", { className: "modal-actions", children: [(0, jsx_runtime_1.jsx)("button", { className: "modal-btn secondary", onClick: closeValueBuilder, children: "Cancel" }), (0, jsx_runtime_1.jsx)("button", { className: "modal-btn primary", onClick: saveValueBuilder, children: "Save" })] })] }) }));
};
exports.default = ValueBuilderModal;
