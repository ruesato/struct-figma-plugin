"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsx_runtime_1 = require("react/jsx-runtime");
const card_1 = require("./ui/card");
const input_1 = require("./ui/input");
const button_1 = require("./ui/button");
const select_1 = require("./ui/select");
const lucide_react_1 = require("lucide-react");
const DataSourceTabs = ({ dataSource, setDataSource, apiConfig, setApiConfig, isLoadingData, fetchApiData, processJsonData, dropZoneRef, handleFileInputChange }) => {
    return ((0, jsx_runtime_1.jsxs)("div", { className: "mb-6", children: [(0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-3 mb-6", children: [(0, jsx_runtime_1.jsx)(card_1.Card, { className: `cursor-pointer transition-all border-[var(--figma-color-border)] bg-[var(--figma-color-bg-secondary)] hover:bg-[var(--figma-color-bg-brand-hover)] text-[var(--figma-color-text)] hover:text-[var(--figma-color-text-onbrand)] ${dataSource === 'file' ? 'bg-[var(--figma-color-bg-brand)] text-[var(--figma-color-text-onbrand)]' : ''}`, onClick: () => setDataSource('file'), children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "p-6 flex flex-col items-center justify-center text-center min-h-[120px]", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "h-8 w-8 mb-4" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-sm", children: ["Upload a ", (0, jsx_runtime_1.jsx)("span", { className: "font-bold", children: "JSON or CSV file" }), " with your data"] })] }) }), (0, jsx_runtime_1.jsx)(card_1.Card, { className: `cursor-pointer transition-all border-[var(--figma-color-border)] hover:bg-[var(--figma-color-bg-brand-hover)] text-[var(--figma-color-text)] bg-[var(--figma-color-bg-secondary)] hover:text-[var(--figma-color-text-onbrand)] ${dataSource === 'api' ? 'bg-[var(--figma-color-bg-brand)] text-[var(--figma-color-text-onbrand)]' : ''}`, onClick: () => setDataSource('api'), children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "p-6 flex flex-col items-center justify-center text-center min-h-[120px]", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.Plug, { className: "h-8 w-8 mb-4" }), (0, jsx_runtime_1.jsxs)("p", { className: "text-sm", children: ["Connect to data via an ", (0, jsx_runtime_1.jsx)("span", { className: "font-bold", children: "API endpoint" })] })] }) })] }), dataSource === 'file' && ((0, jsx_runtime_1.jsxs)("div", { ref: dropZoneRef, className: "border-2 border-dashed border-[var(--figma-color-border)] rounded-lg p-8 text-center hover:border-[var(--figma-color-border-onselected)] transition-colors cursor-pointer", children: [(0, jsx_runtime_1.jsx)(lucide_react_1.FileText, { className: "h-8 w-8 mx-auto mb-4 text-[var(--figma-color-text)]" }), (0, jsx_runtime_1.jsx)("p", { className: "text-sm text-[var(--figma-color-text)] mb-4", children: "Drop JSON or CSV file here or" }), (0, jsx_runtime_1.jsxs)("div", { className: "inline-block", children: [(0, jsx_runtime_1.jsx)("input", { type: "file", accept: ".json,.csv,application/json,text/csv", onChange: handleFileInputChange, className: "hidden", id: "file-upload" }), (0, jsx_runtime_1.jsx)("label", { htmlFor: "file-upload", className: "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 bg-[var(--figma-color-bg-brand)] shadow-sm hover:bg-[var(--figma-color-bg-brand-hover)] text-[var(--figma-color-text-onbrand-secondary)] hover:text-[var(--figma-color-text-onbrand)] h-9 px-4 py-2 cursor-pointer", children: "Choose File" })] }), (0, jsx_runtime_1.jsx)("p", { className: "text-xs text-[var(--figma-color-text)] mt-2", children: "Max 2MB" })] })), dataSource === 'api' && ((0, jsx_runtime_1.jsx)(card_1.Card, { className: "bg-[var(--figma-color-bg-secondary)] border-[var(--figma-color-border)]", children: (0, jsx_runtime_1.jsxs)(card_1.CardContent, { className: "p-3 space-y-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm text-[var(--figma-color-text)]", children: "API URL" }), (0, jsx_runtime_1.jsx)(input_1.Input, { placeholder: "Enter API URL", value: apiConfig.url, onChange: (e) => setApiConfig(prev => ({ ...prev, url: e.target.value })), className: "bg-[var(--figma-color-bg)] border-[var(--figma-color-border)]" })] }), (0, jsx_runtime_1.jsxs)("div", { className: "grid grid-cols-2 gap-3", children: [(0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm text-[var(--figma-color-text)]", children: "Method" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: apiConfig.method, onValueChange: (value) => setApiConfig(prev => ({ ...prev, method: value })), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Banana" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "GET", children: "GET" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "POST", children: "POST" })] })] })] }), (0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm text-[var(--figma-color-text)]", children: "Auth type" }), (0, jsx_runtime_1.jsxs)(select_1.Select, { value: apiConfig.authType, onValueChange: (value) => setApiConfig(prev => ({ ...prev, authType: value })), children: [(0, jsx_runtime_1.jsx)(select_1.SelectTrigger, { children: (0, jsx_runtime_1.jsx)(select_1.SelectValue, { placeholder: "Bearer Token" }) }), (0, jsx_runtime_1.jsxs)(select_1.SelectContent, { children: [(0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "none", children: "None" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "bearer", children: "Bearer Token" }), (0, jsx_runtime_1.jsx)(select_1.SelectItem, { value: "apikey", children: "API Key" })] })] })] })] }), (apiConfig.authType === 'bearer' || apiConfig.authType === 'apikey') && ((0, jsx_runtime_1.jsxs)("div", { className: "space-y-2", children: [(0, jsx_runtime_1.jsx)("label", { className: "text-sm text-[var(--figma-color-text)]", children: "Token" }), (0, jsx_runtime_1.jsx)(input_1.Input, { type: "password", placeholder: "Enter Bearer Token", value: apiConfig.apiKey, onChange: (e) => setApiConfig(prev => ({ ...prev, apiKey: e.target.value })) })] })), (0, jsx_runtime_1.jsx)(button_1.Button, { className: "w-full bg-[var(--figma-color-bg-brand)] text-[var(--figma-color-text-onbrand)]", onClick: fetchApiData, disabled: isLoadingData || !apiConfig.url.trim(), children: isLoadingData ? 'Loading...' : 'Fetch data' })] }) }))] }));
};
exports.default = DataSourceTabs;
